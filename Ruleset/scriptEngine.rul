armors:
  - type: STR_GUNSHIP_ARMOR_UC
    tags:
      ARMOR_ENERGY_SHIELD_HP_PER_TURN: 50
      ARMOR_ENERGY_SHIELD_DECAY: 50

items:
  - type: STR_SHIELD_BUFF
    tags:
      ITEM_ADDS_ENERGY_SHIELD_FROM_POWER: 100
      ITEM_SETS_ENERGY_SHIELD_DECAY: 60
    size: 0.1
    costBuy: 10000
    costSell: 2500
    weight: 7
    bigSprite: 109
    floorSprite: 109
    handSprite: 208
    bulletSprite: 13
    bulletSpeed: 10
    hitSound: 19
    hitAnimation: 26
    power: 50
    damageType: 0
    damageAlter:
      RandomType: 3
      ToArmor: 0.0
      ToStun: 0.0
      ToHealth: 0.0
      ToWound: 0.0
      ArmorEffectiveness: 0.0
    clipSize: -1
    accuracyAimed: 100
    tuAimed: 10
    aimRange: 200
    battleType: 1
    invWidth: 1
    invHeight: 2

extraStrings:
  - type: en-US
    strings:
      STR_DAMAGE_SPECIAL: "SUPPORT"
      STR_DAMAGE_10: "ENVIRONMENTAL"

extended:
  tags:
    BattleUnit:
#*** Tags for handling recoloring of units ***
      UNIT_RECOLOR_DESYNC: int
      UNIT_RECOLOR_COLOR: int
      UNIT_RECOLOR_BRIGHTNESS: int
      UNIT_RECOLOR_START_FRAME: int
      UNIT_RECOLOR_FRAME_LENGTH: int

#*** Tags for handling energy shields on units ***
      UNIT_ENERGY_SHIELD_HP: int
      UNIT_ENERGY_SHIELD_DECAY: int

    RuleArmor:
#*** Tags for energy shield on armor ***
      ARMOR_ENERGY_SHIELD_HP_PER_TURN: int
      ARMOR_ENERGY_SHIELD_DECAY: int

    RuleItem:
#*** Tags for creating energy shields on hitting a unit ***
      ITEM_ADDS_ENERGY_SHIELD_FROM_POWER: int
      ITEM_SETS_ENERGY_SHIELD_DECAY: int

  scripts:
    createUnit:
#*** Sets the frequency and offset for periodic unit recolors for buffs and debuffs ***
      - offset: 1
        code: |
          var int recolorPeriod;
          var int desync;

          set recolorPeriod 32; # units flash every 32 frames
          unit.getId desync;
          offsetmod desync 11 0 recolorPeriod; # creates a desynchronization between unit flashes
          unit.setTag Tag.UNIT_RECOLOR_DESYNC desync;

          return;

#*** Sets energy shields from unit armors at the beginning of the battlescape ***
      - offset: 2
        code: |
          var ptr RuleArmor armorRuleset;
          var int shieldAdded;

          unit.getRuleArmor armorRuleset;
          armorRuleset.getTag shieldAdded Tag.ARMOR_ENERGY_SHIELD_HP_PER_TURN;

          if eq shieldAdded 0;

            return;

          end;

          unit.setTag Tag.UNIT_ENERGY_SHIELD_HP shieldAdded;

          return;

    newTurnUnit:
#*** Handles decay of energy shields and shield HP added by armors
      - offset: 1
        code: |
          var ptr RuleArmor armorRuleset;
          var int shieldHP;
          var int shieldDecay;
          var int shieldAdded;

          # Make sure this doesn't run an extra third time if there's a neutral side
          if eq side 2;
            return;
          end;

          # Check armor first for decay parameter
          unit.getRuleArmor armorRuleset;
          armorRuleset.getTag shieldDecay Tag.ARMOR_ENERGY_SHIELD_DECAY;

          # Next comes decay set by an item
          if eq shieldDecay 0;

            unit.getTag shieldDecay Tag.UNIT_ENERGY_SHIELD_DECAY;

          end;

          # Apply the decay, treating it like the percent lost per turn
          unit.getTag shieldHP Tag.UNIT_ENERGY_SHIELD_HP;
          sub shieldDecay 100;
          mul shieldDecay -1;
          muldiv shieldHP shieldDecay 100;

          # Now add the per-turn amount from armor, to be balanced by decay parameter
          armorRuleset.getTag shieldAdded Tag.ARMOR_ENERGY_SHIELD_HP_PER_TURN;
          add shieldHP shieldAdded;

          unit.setTag Tag.UNIT_ENERGY_SHIELD_HP shieldHP;

          return;

    hitUnit:
#*** First defense layer: does the unit have an energy shield? ***
      - offset: 1
        code: |
          var int shieldHP;
          var int shieldHPAfter;
          var int frame;

          unit.getTag shieldHP Tag.UNIT_ENERGY_SHIELD_HP;

          if or eq shieldHP 0 eq damaging_type 0 eq damaging_type 2 eq damaging_type 9 eq damaging_type 10;

            return power part side;

          end;

          set shieldHPAfter shieldHP;
          sub shieldHPAfter power;
          sub power shieldHP;
          limit_lower shieldHPAfter 0;
          limit_lower power 0;
          unit.setTag Tag.UNIT_ENERGY_SHIELD_HP shieldHPAfter;

          if and gt shieldHPAfter 0 eq power 0;

            battle_game.getAnimFrame frame;
            unit.setTag Tag.UNIT_RECOLOR_START_FRAME frame;
            unit.setTag Tag.UNIT_RECOLOR_FRAME_LENGTH 3;
            unit.setTag Tag.UNIT_RECOLOR_COLOR COLOR_X1_BLUE1;

          end;

          return power part side;

#*** Second defense layer: physical shield ***

#*** Third defense layer: special environmental effects ***

#*** First debuff layer: weak spot targeting for added damage ***

    damageUnit:
#*** First layer of damageUnit logic: buffing units ***
#*** Weapons that add to energy shields ***
      - offset: 1
        code: |
          var ptr RuleItem weaponRuleset;
          var int shieldAdded;
          var int scalingFactor;
          var int linearAddition;
          var int diminishingAddition;
          var int shieldHP;
          var int shieldDecay;
          var int currentDecay;

          damaging_item.getRuleItem weaponRuleset;
          weaponRuleset.getTag shieldAdded Tag.ITEM_ADDS_ENERGY_SHIELD_FROM_POWER;

          if eq shieldAdded 0;

            weapon_item.getRuleItem weaponRuleset;
            weaponRuleset.getTag shieldAdded Tag.ITEM_ADDS_ENERGY_SHIELD_FROM_POWER;

            if eq shieldAdded 0;

              return;

            end;

          end;

          set scalingFactor 50; # Percent factor for diminishing returns beyond the power of the item

          set linearAddition currPower;
          muldiv linearAddition shieldAdded 100;
          set diminishingAddition linearAddition;

          unit.getTag shieldHP Tag.UNIT_ENERGY_SHIELD_HP;
          sub linearAddition shieldHP;

          if gt linearAddition 0;

            set diminishingAddition shieldHP;

          else;

            mul linearAddition -1;
            muldiv linearAddition 100 diminishingAddition;
            sub scalingFactor linearAddition;
            limit_lower scalingFactor 0;
            set linearAddition 0;

          end;

          muldiv diminishingAddition scalingFactor 100;
          add linearAddition diminishingAddition;
          add shieldHP linearAddition;
          unit.setTag Tag.UNIT_ENERGY_SHIELD_HP shieldHP;

          weaponRuleset.getTag shieldDecay Tag.ITEM_SETS_ENERGY_SHIELD_DECAY;
          unit.getTag currentDecay Tag.UNIT_ENERGY_SHIELD_DECAY;

          if gt shieldDecay currentDecay;

            unit.setTag Tag.UNIT_ENERGY_SHIELD_DECAY shieldDecay;

          end;

          return;

#*** Weapons that add to defensive reactions ***

#*** Second layer of damageUnit logic: debuffing units ***
#*** Weapons that target weak spots for other attacks ***

    recolorUnitSprite:
#*** Handles periodic recolors due to buffs/debuffs on units ***
      - offset: 1
        code: |
          var int frame;
          var int frameLength;
          var int recolorPeriod;
          var int desync;
          var int color;
          var int newShade;
          var int temp;

          # Check to make sure this unit isn't set to be recolored by a hit first
          unit.getTag frame Tag.UNIT_RECOLOR_START_FRAME;
          unit.getTag frameLength Tag.UNIT_RECOLOR_FRAME_LENGTH;

          if neq frame 0;

            set temp anim_frame;
            sub temp frame;

            if lt temp frameLength;

              return new_pixel;

            end;

          end;

          set recolorPeriod 32;
          set frameLength 4;

          unit.getTag desync Tag.UNIT_RECOLOR_DESYNC;
          set frame anim_frame;
          add frame desync;
          mod frame recolorPeriod;

          # First, a blue flash if the unit has an energy shield
          unit.getTag temp Tag.UNIT_ENERGY_SHIELD_HP;
          set color COLOR_X1_BLUE1;
          if and neq temp 0 lt frame frameLength;

            set temp frameLength;
            sub temp frame;
            mul temp 2; # a parameter that creates a nice flash animation
            get_shade newShade new_pixel;
            sub newShade temp;

            if and gt newShade 3 lt newShade 16;

              set_shade new_pixel newShade;
              set_color new_pixel color;

            end;

            return new_pixel;

          end;

          sub frame frameLength;
          sub frame 1;

          # Next, a green flash if they have the reactions defense buff
          #unit.getTag temp Tag.UNIT_DEFENSIVE_REACTIONS_BOOST;
          set color COLOR_X1_GREEN0;
          if and neq 0 0 lt frame frameLength;

            set temp frameLength;
            sub temp frame;
            mul temp 2; # a parameter that creates a nice flash animation
            get_shade newShade new_pixel;
            sub newShade temp;

            if and gt newShade 3 lt newShade 16;

              set_shade new_pixel newShade;
              set_color new_pixel color;

            end;

            return new_pixel;

          end;

          return new_pixel;

#*** Handles recolors due to hitting a unit ***
      - offset: 2
        code: |
          var int frame;
          var int frameLength;
          var int color;
          var int newShade;
          var int temp;

          unit.getTag frame Tag.UNIT_RECOLOR_START_FRAME;
          unit.getTag frameLength Tag.UNIT_RECOLOR_FRAME_LENGTH;

          if neq frame 0;

            set temp anim_frame;
            sub temp frame;

            if lt temp frameLength;

              # Check shade, add some darkening decay, but don't recolor if it'd go too dark
              get_shade newShade new_pixel;
              mul temp 4; # a parameter that creates a nice flash animation
              sub newShade temp;

              if or lt newShade 4 gt newShade 15;

                return new_pixel;

              end;

              # Add some brightness if the tag is set
              unit.getTag temp Tag.UNIT_RECOLOR_BRIGHTNESS;
              sub newShade temp;
              limit_lower newShade 1;

              unit.getTag color Tag.UNIT_RECOLOR_COLOR;
              set_color new_pixel color;
              set_shade new_pixel newShade;

            end;

          end;

          return new_pixel;
